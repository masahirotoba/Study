# 元のテーブルはコレ
shop=# SELECT * FROM shohin;
 shohin_id |   shohin_mei   | shohin_bunrui | hanbai_tanka | shiire_tanka |  torokubi
-----------+----------------+---------------+--------------+--------------+------------
 0001      | Tシャツ        | 衣服          |         1000 |          500 | 2009-09-20
 0002      | 穴あけパンチ   | 事務用品      |          500 |          320 | 2009-09-11
 0003      | カッターシャツ | 衣服          |         4000 |         2800 |
 0004      | 包丁           | キッチン用品  |         3000 |         2800 | 2009-09-20
 0005      | 圧力鍋         | キッチン用品  |         6800 |         5000 | 2009-01-15
 0006      | フォーク       | キッチン用品  |          500 |              | 2009-09-20
 0007      | おろしがね     | キッチン用品  |          880 |          790 | 2008-04-28
 0008      | ボールペン     | 事務用品      |          100 |              | 2009-11-11
(8 行)

# 販売単価の順に並び替える
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka FROM shohin ORDER BY hanbai_tanka;
   shohin_mei   | shohin_bunrui | hanbai_tanka
----------------+---------------+--------------
 ボールペン     | 事務用品      |          100
 フォーク       | キッチン用品  |          500
 穴あけパンチ   | 事務用品      |          500
 おろしがね     | キッチン用品  |          880
 Tシャツ        | 衣服          |         1000
 包丁           | キッチン用品  |         3000
 カッターシャツ | 衣服          |         4000
 圧力鍋         | キッチン用品  |         6800
(8 行)

# RANK関数でグループ化してみる
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK () OVER(PARTITION BY shohin_bunrui ORDER BY hanbai_tanka) AS ranking FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | ranking
----------------+---------------+--------------+---------
 フォーク       | キッチン用品  |          500 |       1
 おろしがね     | キッチン用品  |          880 |       2
 包丁           | キッチン用品  |         3000 |       3
 圧力鍋         | キッチン用品  |         6800 |       4
 Tシャツ        | 衣服          |         1000 |       1
 カッターシャツ | 衣服          |         4000 |       2
 ボールペン     | 事務用品      |          100 |       1
 穴あけパンチ   | 事務用品      |          500 |       2
(8 行)

# RANKの後の()にはどんな意味が？
RANK()の後の括弧は関数の引数を指定する場所ですが、RANK関数の場合は引数が不要なので空っぽになっています。
RANK()の括弧の意味
1. 関数の構文として必要
sqlRANK()  -- 括弧は関数であることを示すために必須
2. 引数は不要

RANK関数は引数を取らない
並び順やグループ分けはOVER()句で指定するため

# OVERにはどんな意味が？
1. 文字通りの意味
「〜にわたって」「〜の範囲で」
英語の"over"と同じ意味
計算の対象範囲を指定

2. SQLでの役割
ウィンドウ（計算の窓）を定義
sqlRANK() OVER(PARTITION BY shohin_bunrui ORDER BY hanbai_tanka)
       ^^^^
       この部分で「どの範囲で計算するか」を指定

# ORDER BYをなくしたパターン
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK () OVER(ORDER BY hanbai_tanka) AS ranking FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | ranking
----------------+---------------+--------------+---------
 ボールペン     | 事務用品      |          100 |       1
 フォーク       | キッチン用品  |          500 |       2
 穴あけパンチ   | 事務用品      |          500 |       2
 おろしがね     | キッチン用品  |          880 |       4
 Tシャツ        | 衣服          |         1000 |       5
 包丁           | キッチン用品  |         3000 |       6
 カッターシャツ | 衣服          |         4000 |       7
 圧力鍋         | キッチン用品  |         6800 |       8
(8 行)

# PARTITION BYだけのパターン
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK () OVER(PARTITION BY shohin_bunrui) AS ranking FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | ranking
----------------+---------------+--------------+---------
 圧力鍋         | キッチン用品  |         6800 |       1
 フォーク       | キッチン用品  |          500 |       1
 おろしがね     | キッチン用品  |          880 |       1
 包丁           | キッチン用品  |         3000 |       1
 Tシャツ        | 衣服          |         1000 |       1
 カッターシャツ | 衣服          |         4000 |       1
 穴あけパンチ   | 事務用品      |          500 |       1
 ボールペン     | 事務用品      |          100 |       1
(8 行)

# RANK関数の動作原理
ORDER BYがないと、並び順が定義されない
並び順がないと、すべてのレコードが「同じ順位」とみなされる
結果として、各グループ内の全商品が1位タイになる
