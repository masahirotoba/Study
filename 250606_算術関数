# コレを計算していく
shop=# SELECT * FROM samplemath;
    m     | n | p
----------+---+---
  500.000 | 0 |
 -180.000 | 0 |
          |   |
          | 7 | 3
          | 5 | 2
          | 4 |
    8.000 |   | 3
    2.270 | 1 |
    5.555 | 2 |
          | 1 |
    8.760 |   |
(11 行)

# テーブル名は小文字でもOK
shop=# SELECT m, ABS(m) AS abs_col FROM samplemath;
    m     | abs_col
----------+---------
  500.000 | 500.000
 -180.000 | 180.000
          |
          |
          |
          |
    8.000 |   8.000
    2.270 |   2.270
    5.555 |   5.555
          |
    8.760 |   8.760
(11 行)

# 日本語の列名を付けるとわかりやすい
shop=# SELECT m,ABS(m) AS 絶対値 FROM samplemath;
    m     | 絶対値
----------+---------
  500.000 | 500.000
 -180.000 | 180.000
          |
          |
          |
          |
    8.000 |   8.000
    2.270 |   2.270
    5.555 |   5.555
          |
    8.760 |   8.760
(11 行)

# 割り算の余り
shop=# SELECT n,p,MOD(n,p) AS 割り算の余り FROM samplemath;
 n | p | 割り算の余り
---+---+--------------
 0 |   |
 0 |   |
   |   |
 7 | 3 |            1
 5 | 2 |            1
 4 |   |
   | 3 |
 1 |   |
 2 |   |
 1 |   |
   |   |
(11 行)

# ただの割り算
 n | p | ?column?
---+---+----------
 0 |   |
 0 |   |
   |   |
 7 | 3 |        2
 5 | 2 |        2
 4 |   |
   | 3 |
 1 |   |
 2 |   |
 1 |   |
   |   |
(11 行)
→列名は計算式になっていることがわかる

# 2つ計算したら、列名はどうなるか
　→同じになった
shop=# SELECT n,p,n/p,n*p FROM samplemath;
 n | p | ?column? | ?column?
---+---+----------+----------
 0 |   |          |
 0 |   |          |
   |   |          |
 7 | 3 |        2 |       21
 5 | 2 |        2 |       10
 4 |   |          |
   | 3 |          |
 1 |   |          |
 2 |   |          |
 1 |   |          |
   |   |          |
(11 行)

# ROUND関数で2桁で丸めた
shop=# SELECT m,n,ROUND(m,2) AS 四捨五入 FROM samplemath;
    m     | n | 四捨五入
----------+---+----------
  500.000 | 0 |   500.00
 -180.000 | 0 |  -180.00
          |   |
          | 7 |
          | 5 |
          | 4 |
    8.000 |   |     8.00
    2.270 | 1 |     2.27
    5.555 | 2 |     5.56
          | 1 |
    8.760 |   |     8.76
(11 行)

# 小文字が推奨される理由
可読性の向上
user_profile のような小文字+アンダースコアの命名は読みやすい
CamelCaseよりもsnake_caseの方が一般的

データベース間の互換性
PostgreSQL、MySQL、SQLiteなど多くのDBで問題なく動作
大文字小文字の扱いがDB製品によって異なるため、小文字なら安全

業界標準
多くの開発チームや企業で小文字の命名規則が採用されている

※）自分で作るなら、小文字にするべきだ

# ASを省略した場合、データベースが自動的に列名を決定する
関数の場合: 通常は関数名が使われる
ABS(m) → abs
COUNT(*) → count
SUM(price) → sum

計算式の場合: データベースによって異なる
price * 1.1 → ?column? (PostgreSQL)
price * 1.1 → price * 1.1 (MySQL)

# 仮想的なテーブルだからこそ、列名を定義する必要がある

